<?php
namespace Modules\Job\Controllers;
use Modules\Booking\Models\Enquiry;
use Modules\FrontendController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\Job\Models\Job;
use Modules\Core\Models\Categories;
use Modules\Location\Models\Location;
use Modules\Core\Models\Attributes;
use Modules\Booking\Models\Booking;
use Modules\Job\Models\JobTerm;
use Modules\Job\Models\JobTranslation;
class VendorController extends FrontendController
{
    protected $jobClass;
    protected $jobTranslationClass;
    protected $jobTermClass;
    protected $attributesClass;
    protected $locationClass;
    protected $bookingClass;
    protected $categoriesClass;
    public function __construct()
    {
        parent::__construct();
        $this->jobClass = Job::class;
        $this->jobTranslationClass = JobTranslation::class;
        $this->jobTermClass = JobTerm::class;
        $this->attributesClass = Attributes::class;
        $this->locationClass = Location::class;
        $this->categoriesClass = Categories::class;
        $this->bookingClass = Booking::class;
    }
    public function callAction($method, $parameters)
    {
        if(!Job::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }
    public function index(Request $request)
    {
        $this->checkPermission('job_view');
        $user_id = Auth::id();
        $list_job = $this->jobClass::where("create_user", $user_id)->orderBy('id', 'desc');
        if($request->status){
            $list_job = $list_job->where('status',$request->status);
        }else{
            $list_job = $list_job->where('status','publish');
        }
        $data = [
            'rows' => $list_job->paginate(5),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Jobs'),
                    'url'  => route('job.vendor.index')
                ],
                [
                    'name'  => __('All'),
                    'class' => 'active'
                ],
            ],
            'job_count' =>[
                'publish'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','publish')->count(),
                'closed'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','draft')->count(),
            ],
            'active_class'=>'job_dashboard',
            'page_title'         => __("Manage Jobs"),
        ];
        return view('Job::frontend.vendorJob.index', $data);
    }
    public function recovery(Request $request)
    {
        $this->checkPermission('job_view');
        $user_id = Auth::id();
        $list_job = $this->jobClass::onlyTrashed()->where("create_user", $user_id)->orderBy('id', 'desc');
        $data = [
            'rows' => $list_job->paginate(5),
            'recovery'           => 1,
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Jobs'),
                    'url'  => route('job.vendor.index')
                ],
                [
                    'name'  => __('Recovery'),
                    'class' => 'active'
                ],
            ],
            'job_count' =>[
                'publish'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','publish')->count(),
                'closed'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','draft')->count(),
            ],
            'page_title'         => __("Recovery Jobs"),
        ];
        return view('Job::frontend.vendorJob.index', $data);
    }
    public function create(Request $request)
    {
        $user_id = Auth::id();
        $this->checkPermission('job_create');
        $row = new $this->jobClass();
        $data = [
            'row'           => $row,
            'translation' => new $this->jobTranslationClass(),
            'categories'     => $this->categoriesClass::where('service', 'Job')->get(),
            'job_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'attributes'    => $this->attributesClass::where('service', 'job')->get(),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Jobs'),
                    'url'  => route('job.vendor.index')
                ],
                [
                    'name'  => __('Create'),
                    'class' => 'active'
                ],
            ],
            'job_count' =>[
                'publish'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','publish')->count(),
                'closed'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','draft')->count(),
            ],
            'active_class'=>'job_create',
            'page_title'         => __("Create Jobs"),
        ];
        return view('Job::frontend.vendorJob.detail', $data);
    }
    public function store( Request $request, $id ){
        if($id>0){
            $this->checkPermission('job_update');
            $row = $this->jobClass::find($id);
            if (empty($row)) {
                return redirect(route('job.vendor.index'));
            }
            if($row->create_user != Auth::id() and !$this->hasPermission('job_manage_others'))
            {
                return redirect(route('job.vendor.index'));
            }
        }else{
            $this->checkPermission('job_create');
            $row = new $this->jobClass();
            $row->status = "publish";
            if(setting_item("job_vendor_create_service_must_approved_by_admin", 0)){
                $row->status = "pending";
            }
        }
        $dataKeys = [
            'title',
            'content',
            'image_id',
            'banner_image_id',
            'location_id',
            'category_id',
            'address',
            'contact_email',
            'contact_phone',
            'start_at',
            'duration',
            'status',
            'job_type',
        ];
        if($this->hasPermission('job_manage_others')){
            $dataKeys[] = 'create_user';
        }
        $row->fillByAttr($dataKeys,$request->input());
        if($request->input('slug')){
            $row->slug = $request->input('slug');
        }
        if($request->work_exp){
            $row->work_exp = json_encode($request->work_exp);
        }else{
            $row->work_exp = '{}';
        }
        $res = $row->saveOriginOrTranslation($request->input('lang'),true);
        if ($res) {
            if(!$request->input('lang') or is_default_lang($request->input('lang'))) {
                $this->saveTerms($row, $request);
            }
            if($id > 0 ){
                return back()->with('success',  __('Job updated') );
            }else{
                return redirect(route('job.vendor.edit',['id'=>$row->id]))->with('success', __('Job created') );
            }
        }
    }
    public function saveTerms($row, $request)
    {
        if (empty($request->input('terms'))) {
            $this->jobTermClass::where('target_id', $row->id)->delete();
        } else {
            $term_ids = $request->input('terms');
            foreach ($term_ids as $term_id) {
                $this->jobTermClass::firstOrCreate([
                    'term_id' => $term_id,
                    'target_id' => $row->id
                ]);
            }
            $this->jobTermClass::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
        }
    }
    public function edit(Request $request, $id)
    {
        $this->checkPermission('job_update');
        $user_id = Auth::id();
        $row = $this->jobClass::where("create_user", $user_id);
        $row = $row->find($id);
        if (empty($row)) {
            return redirect(route('job.vendor.index'))->with('warning', __('Space not found!'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        $data = [
            'translation'    => $translation,
            'row'           => $row,
            'job_location' => $this->locationClass::where("status","publish")->get()->toTree(),
            'categories'     => $this->categoriesClass::where('service', 'Job')->get(),
            'attributes'    => $this->attributesClass::where('service', 'job')->get(),
            "selected_terms" => $row->terms->pluck('term_id'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Jobs'),
                    'url'  => route('job.vendor.index')
                ],
                [
                    'name'  => __('Edit'),
                    'class' => 'active'
                ],
            ],
            'job_count' =>[
                'publish'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','publish')->count(),
                'closed'=>$this->jobClass::where("create_user", $user_id)
                                ->where('status','draft')->count(),
            ],
            'page_title'         => __("Edit Jobs"),
        ];
        return view('Job::frontend.vendorJob.detail', $data);
    }
    public function delete($id)
    {
        $this->checkPermission('job_delete');
        $user_id = Auth::id();
        $query = $this->jobClass::where("create_user", $user_id)->where("id", $id)->first();
        if(!empty($query)){
            $query->delete();
        }
        return redirect(route('job.vendor.index'))->with('success', __('Delete job success!'));
    }
    public function restore($id)
    {
        $this->checkPermission('job_delete');
        $user_id = Auth::id();
        $query = $this->jobClass::onlyTrashed()->where("create_user", $user_id)->where("id", $id)->first();
        if(!empty($query)){
            $query->restore();
        }
        return redirect(route('job.vendor.recovery'))->with('success', __('Restore job success!'));
    }
    public function bulkEditJob($id , Request $request){
        $this->checkPermission('job_update');
        $action = $request->input('action');
        $user_id = Auth::id();
        $query = $this->jobClass::where("create_user", $user_id)->where("id", $id)->first();
        if (empty($id)) {
            return redirect()->back()->with('error', __('No item!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        if(empty($query)){
            return redirect()->back()->with('error', __('Not Found'));
        }
        switch ($action){
            case "make-hide":
                $query->status = "draft";
                break;
            case "make-publish":
                $query->status = "publish";
                break;
        }
        $query->save();
        return redirect()->back()->with('success', __('Update success!'));
    }
    public function bookingReport(Request $request)
    {
        $data = [
            'bookings' => $this->bookingClass::getBookingHistory($request->input('status'), false , Auth::id() , 'job'),
            'statues'  => config('booking.statuses'),
            'breadcrumbs'        => [
                [
                    'name' => __('Manage Job'),
                    'url'  => route('job.vendor.index')
                ],
                [
                    'name' => __('Booking Report'),
                    'class'  => 'active'
                ]
            ],
            'page_title'         => __("Booking Report"),
        ];
        return view('Job::frontend.vendorJob.bookingReport', $data);
    }
    public function bookingReportBulkEdit($booking_id , Request $request){
        $status = $request->input('status');
        if (!empty(setting_item("job_allow_vendor_can_change_their_booking_status")) and !empty($status) and !empty($booking_id)) {
            $query = $this->bookingClass::where("id", $booking_id);
            $query->where("vendor_id", Auth::id());
            $item = $query->first();
            if(!empty($item)){
                $item->status = $status;
                $item->save();
                if($status == Booking::CANCELLED) $item->tryRefundToWallet();
                $item->sendStatusUpdatedEmails();
                return redirect()->back()->with('success', __('Update success'));
            }
            return redirect()->back()->with('error', __('Booking not found!'));
        }
        return redirect()->back()->with('error', __('Update fail!'));
    }
}
